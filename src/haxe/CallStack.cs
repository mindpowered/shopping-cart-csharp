// Generated by Haxe 4.1.1

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe._CallStack {
	public sealed class CallStack_Impl_ {
		
		
		
		public static int get_length(global::Array<object> this1) {
			#line 46 "/opt/haxe/std/haxe/CallStack.hx"
			return this1.length;
		}
		#line default
		
		public static global::Array<object> callStack() {
			unchecked {
				#line 52 "/opt/haxe/std/haxe/CallStack.hx"
				return global::haxe.NativeStackTrace.toHaxe(new global::System.Diagnostics.StackTrace(((int) (1) ), ((bool) (true) )), default(global::haxe.lang.Null<int>));
			}
			#line default
		}
		
		
		public static global::Array<object> exceptionStack() {
			#line 63 "/opt/haxe/std/haxe/CallStack.hx"
			global::Array<object> eStack = global::haxe.NativeStackTrace.toHaxe(global::haxe.NativeStackTrace.exceptionStack(), default(global::haxe.lang.Null<int>));
			return ((global::Array<object>) (global::haxe._CallStack.CallStack_Impl_.subtract(eStack, global::haxe._CallStack.CallStack_Impl_.callStack())) );
		}
		#line default
		
		public static string toString(global::Array<object> stack) {
			#line 71 "/opt/haxe/std/haxe/CallStack.hx"
			global::StringBuf b = new global::StringBuf();
			{
				#line 72 "/opt/haxe/std/haxe/CallStack.hx"
				int _g = 0;
				#line 72 "/opt/haxe/std/haxe/CallStack.hx"
				global::Array<object> _g1 = ((global::Array<object>) (stack) );
				#line 72 "/opt/haxe/std/haxe/CallStack.hx"
				while (( _g < _g1.length )) {
					#line 72 "/opt/haxe/std/haxe/CallStack.hx"
					global::haxe.StackItem s = ((global::haxe.StackItem) (_g1[_g]) );
					#line 72 "/opt/haxe/std/haxe/CallStack.hx"
					 ++ _g;
					b.b.Append(((string) ("\nCalled from ") ));
					#line 74 "/opt/haxe/std/haxe/CallStack.hx"
					global::haxe._CallStack.CallStack_Impl_.itemToString(b, s);
				}
				
			}
			
			#line 76 "/opt/haxe/std/haxe/CallStack.hx"
			return b.b.ToString();
		}
		#line default
		
		public static global::Array<object> subtract(global::Array<object> this1, global::Array<object> stack) {
			unchecked {
				#line 84 "/opt/haxe/std/haxe/CallStack.hx"
				int startIndex = -1;
				int i = -1;
				#line 86 "/opt/haxe/std/haxe/CallStack.hx"
				while ((  ++ i < this1.length )) {
					#line 87 "/opt/haxe/std/haxe/CallStack.hx"
					{
						#line 87 "/opt/haxe/std/haxe/CallStack.hx"
						int _g = 0;
						#line 87 "/opt/haxe/std/haxe/CallStack.hx"
						int _g1 = ((global::Array<object>) (stack) ).length;
						#line 87 "/opt/haxe/std/haxe/CallStack.hx"
						while (( _g < _g1 )) {
							#line 87 "/opt/haxe/std/haxe/CallStack.hx"
							int j = _g++;
							if (global::haxe._CallStack.CallStack_Impl_.equalItems(((global::haxe.StackItem) (this1[i]) ), ((global::haxe.StackItem) (((global::Array<object>) (stack) )[j]) ))) {
								#line 89 "/opt/haxe/std/haxe/CallStack.hx"
								if (( startIndex < 0 )) {
									#line 90 "/opt/haxe/std/haxe/CallStack.hx"
									startIndex = i;
								}
								
								#line 92 "/opt/haxe/std/haxe/CallStack.hx"
								 ++ i;
								if (( i >= this1.length )) {
									#line 93 "/opt/haxe/std/haxe/CallStack.hx"
									break;
								}
								
							}
							else {
								#line 95 "/opt/haxe/std/haxe/CallStack.hx"
								startIndex = -1;
							}
							
						}
						
					}
					
					#line 98 "/opt/haxe/std/haxe/CallStack.hx"
					if (( startIndex >= 0 )) {
						#line 98 "/opt/haxe/std/haxe/CallStack.hx"
						break;
					}
					
				}
				
				#line 100 "/opt/haxe/std/haxe/CallStack.hx"
				if (( startIndex >= 0 )) {
					#line 100 "/opt/haxe/std/haxe/CallStack.hx"
					return this1.slice(0, new global::haxe.lang.Null<int>(startIndex, true));
				}
				else {
					#line 100 "/opt/haxe/std/haxe/CallStack.hx"
					return this1;
				}
				
			}
			#line default
		}
		
		
		public static global::Array<object> copy(global::Array<object> this1) {
			#line 107 "/opt/haxe/std/haxe/CallStack.hx"
			return this1.copy();
		}
		#line default
		
		public static global::haxe.StackItem @get(global::Array<object> this1, int index) {
			#line 111 "/opt/haxe/std/haxe/CallStack.hx"
			return ((global::haxe.StackItem) (this1[index]) );
		}
		#line default
		
		public static global::Array<object> asArray(global::Array<object> this1) {
			#line 115 "/opt/haxe/std/haxe/CallStack.hx"
			return this1;
		}
		#line default
		
		public static bool equalItems(global::haxe.StackItem item1, global::haxe.StackItem item2) {
			unchecked {
				#line 119 "/opt/haxe/std/haxe/CallStack.hx"
				if (( item1 == null )) {
					#line 120 "/opt/haxe/std/haxe/CallStack.hx"
					if (( item2 == null )) {
						#line 120 "/opt/haxe/std/haxe/CallStack.hx"
						return true;
					}
					else {
						#line 130 "/opt/haxe/std/haxe/CallStack.hx"
						return false;
					}
					
				}
				else {
					#line 119 "/opt/haxe/std/haxe/CallStack.hx"
					switch (item1._hx_index) {
						case 0:
						{
							#line 119 "/opt/haxe/std/haxe/CallStack.hx"
							if (( item2 == null )) {
								#line 130 "/opt/haxe/std/haxe/CallStack.hx"
								return false;
							}
							else if (( item2._hx_index == 0 )) {
								#line 121 "/opt/haxe/std/haxe/CallStack.hx"
								return true;
							}
							else {
								#line 130 "/opt/haxe/std/haxe/CallStack.hx"
								return false;
							}
							
						}
						
						
						case 1:
						{
							#line 119 "/opt/haxe/std/haxe/CallStack.hx"
							if (( item2 == null )) {
								#line 130 "/opt/haxe/std/haxe/CallStack.hx"
								return false;
							}
							else if (( item2._hx_index == 1 )) {
								#line 122 "/opt/haxe/std/haxe/CallStack.hx"
								string m1 = ( item1 as global::haxe.StackItem_Module ).m;
								#line 122 "/opt/haxe/std/haxe/CallStack.hx"
								string m2 = ( item2 as global::haxe.StackItem_Module ).m;
								return ( m1 == m2 );
							}
							else {
								#line 130 "/opt/haxe/std/haxe/CallStack.hx"
								return false;
							}
							
						}
						
						
						case 2:
						{
							#line 119 "/opt/haxe/std/haxe/CallStack.hx"
							if (( item2 == null )) {
								#line 130 "/opt/haxe/std/haxe/CallStack.hx"
								return false;
							}
							else if (( item2._hx_index == 2 )) {
								#line 124 "/opt/haxe/std/haxe/CallStack.hx"
								global::haxe.StackItem item11 = ( item1 as global::haxe.StackItem_FilePos ).s;
								#line 124 "/opt/haxe/std/haxe/CallStack.hx"
								string file1 = ( item1 as global::haxe.StackItem_FilePos ).file;
								#line 124 "/opt/haxe/std/haxe/CallStack.hx"
								int line1 = ( item1 as global::haxe.StackItem_FilePos ).line;
								#line 124 "/opt/haxe/std/haxe/CallStack.hx"
								global::haxe.lang.Null<int> col1 = ( item1 as global::haxe.StackItem_FilePos ).column;
								#line 124 "/opt/haxe/std/haxe/CallStack.hx"
								global::haxe.lang.Null<int> col2 = ( item2 as global::haxe.StackItem_FilePos ).column;
								#line 124 "/opt/haxe/std/haxe/CallStack.hx"
								int line2 = ( item2 as global::haxe.StackItem_FilePos ).line;
								#line 124 "/opt/haxe/std/haxe/CallStack.hx"
								string file2 = ( item2 as global::haxe.StackItem_FilePos ).file;
								#line 124 "/opt/haxe/std/haxe/CallStack.hx"
								global::haxe.StackItem item21 = ( item2 as global::haxe.StackItem_FilePos ).s;
								if (( ( ( file1 == file2 ) && ( line1 == line2 ) ) && global::haxe.lang.Runtime.eq((col1).toDynamic(), (col2).toDynamic()) )) {
									#line 125 "/opt/haxe/std/haxe/CallStack.hx"
									return global::haxe._CallStack.CallStack_Impl_.equalItems(item11, item21);
								}
								else {
									#line 125 "/opt/haxe/std/haxe/CallStack.hx"
									return false;
								}
								
							}
							else {
								#line 130 "/opt/haxe/std/haxe/CallStack.hx"
								return false;
							}
							
						}
						
						
						case 3:
						{
							#line 119 "/opt/haxe/std/haxe/CallStack.hx"
							if (( item2 == null )) {
								#line 130 "/opt/haxe/std/haxe/CallStack.hx"
								return false;
							}
							else if (( item2._hx_index == 3 )) {
								#line 126 "/opt/haxe/std/haxe/CallStack.hx"
								string class1 = ( item1 as global::haxe.StackItem_Method ).classname;
								#line 126 "/opt/haxe/std/haxe/CallStack.hx"
								string method1 = ( item1 as global::haxe.StackItem_Method ).method;
								#line 126 "/opt/haxe/std/haxe/CallStack.hx"
								string method2 = ( item2 as global::haxe.StackItem_Method ).method;
								#line 126 "/opt/haxe/std/haxe/CallStack.hx"
								string class2 = ( item2 as global::haxe.StackItem_Method ).classname;
								if (( class1 == class2 )) {
									#line 127 "/opt/haxe/std/haxe/CallStack.hx"
									return ( method1 == method2 );
								}
								else {
									#line 127 "/opt/haxe/std/haxe/CallStack.hx"
									return false;
								}
								
							}
							else {
								#line 130 "/opt/haxe/std/haxe/CallStack.hx"
								return false;
							}
							
						}
						
						
						case 4:
						{
							#line 119 "/opt/haxe/std/haxe/CallStack.hx"
							if (( item2 == null )) {
								#line 130 "/opt/haxe/std/haxe/CallStack.hx"
								return false;
							}
							else if (( item2._hx_index == 4 )) {
								#line 128 "/opt/haxe/std/haxe/CallStack.hx"
								global::haxe.lang.Null<int> v1 = ( item1 as global::haxe.StackItem_LocalFunction ).v;
								#line 128 "/opt/haxe/std/haxe/CallStack.hx"
								global::haxe.lang.Null<int> v2 = ( item2 as global::haxe.StackItem_LocalFunction ).v;
								return global::haxe.lang.Runtime.eq((v1).toDynamic(), (v2).toDynamic());
							}
							else {
								#line 130 "/opt/haxe/std/haxe/CallStack.hx"
								return false;
							}
							
						}
						
						
					}
					
				}
				
				#line 118 "/opt/haxe/std/haxe/CallStack.hx"
				return default(bool);
			}
			#line default
		}
		
		
		public static string exceptionToString(global::haxe.Exception e) {
			#line 135 "/opt/haxe/std/haxe/CallStack.hx"
			if (( e.get_previous() == null )) {
				#line 136 "/opt/haxe/std/haxe/CallStack.hx"
				string tmp = global::haxe.lang.Runtime.concat("Exception: ", e.get_message());
				#line 136 "/opt/haxe/std/haxe/CallStack.hx"
				global::Array<object> tmp1 = e.get_stack();
				#line 136 "/opt/haxe/std/haxe/CallStack.hx"
				return global::haxe.lang.Runtime.concat(tmp, (( (( tmp1 == null )) ? ("null") : (global::haxe._CallStack.CallStack_Impl_.toString(tmp1)) )));
			}
			
			#line 138 "/opt/haxe/std/haxe/CallStack.hx"
			string result = "";
			global::haxe.Exception e1 = e;
			#line 140 "/opt/haxe/std/haxe/CallStack.hx"
			global::haxe.Exception prev = null;
			while (( e1 != null )) {
				#line 142 "/opt/haxe/std/haxe/CallStack.hx"
				if (( prev == null )) {
					#line 143 "/opt/haxe/std/haxe/CallStack.hx"
					string result1 = global::haxe.lang.Runtime.concat("Exception: ", e1.get_message());
					#line 143 "/opt/haxe/std/haxe/CallStack.hx"
					global::Array<object> tmp2 = e1.get_stack();
					#line 143 "/opt/haxe/std/haxe/CallStack.hx"
					result = global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(result1, (( (( tmp2 == null )) ? ("null") : (global::haxe._CallStack.CallStack_Impl_.toString(tmp2)) ))), result);
				}
				else {
					#line 145 "/opt/haxe/std/haxe/CallStack.hx"
					global::Array<object> prevStack = global::haxe._CallStack.CallStack_Impl_.subtract(e1.get_stack(), prev.get_stack());
					result = global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Exception: ", e1.get_message()), (( (( prevStack == null )) ? ("null") : (global::haxe._CallStack.CallStack_Impl_.toString(prevStack)) ))), "\n\nNext "), result);
				}
				
				#line 148 "/opt/haxe/std/haxe/CallStack.hx"
				prev = e1;
				e1 = e1.get_previous();
			}
			
			#line 151 "/opt/haxe/std/haxe/CallStack.hx"
			return result;
		}
		#line default
		
		public static void itemToString(global::StringBuf b, global::haxe.StackItem s) {
			unchecked {
				#line 155 "/opt/haxe/std/haxe/CallStack.hx"
				switch (s._hx_index) {
					case 0:
					{
						#line 157 "/opt/haxe/std/haxe/CallStack.hx"
						b.b.Append(((string) ("a C function") ));
						#line 157 "/opt/haxe/std/haxe/CallStack.hx"
						break;
					}
					
					
					case 1:
					{
						#line 158 "/opt/haxe/std/haxe/CallStack.hx"
						string m = ( s as global::haxe.StackItem_Module ).m;
						#line 158 "/opt/haxe/std/haxe/CallStack.hx"
						{
							#line 159 "/opt/haxe/std/haxe/CallStack.hx"
							b.b.Append(((string) ("module ") ));
							b.b.Append(((string) (global::Std.@string(m)) ));
						}
						
						#line 158 "/opt/haxe/std/haxe/CallStack.hx"
						break;
					}
					
					
					case 2:
					{
						#line 161 "/opt/haxe/std/haxe/CallStack.hx"
						global::haxe.lang.Null<int> col = ( s as global::haxe.StackItem_FilePos ).column;
						#line 161 "/opt/haxe/std/haxe/CallStack.hx"
						int line = ( s as global::haxe.StackItem_FilePos ).line;
						#line 161 "/opt/haxe/std/haxe/CallStack.hx"
						string file = ( s as global::haxe.StackItem_FilePos ).file;
						#line 161 "/opt/haxe/std/haxe/CallStack.hx"
						global::haxe.StackItem s1 = ( s as global::haxe.StackItem_FilePos ).s;
						#line 161 "/opt/haxe/std/haxe/CallStack.hx"
						{
							#line 162 "/opt/haxe/std/haxe/CallStack.hx"
							if (( s1 != null )) {
								#line 163 "/opt/haxe/std/haxe/CallStack.hx"
								global::haxe._CallStack.CallStack_Impl_.itemToString(b, s1);
								b.b.Append(((string) (" (") ));
							}
							
							#line 166 "/opt/haxe/std/haxe/CallStack.hx"
							b.b.Append(((string) (global::Std.@string(file)) ));
							b.b.Append(((string) (" line ") ));
							#line 168 "/opt/haxe/std/haxe/CallStack.hx"
							b.b.Append(((string) (global::Std.@string(line)) ));
							if (col.hasValue) {
								#line 170 "/opt/haxe/std/haxe/CallStack.hx"
								b.b.Append(((string) (" column ") ));
								b.b.Append(((string) (global::Std.@string((col).toDynamic())) ));
							}
							
							#line 173 "/opt/haxe/std/haxe/CallStack.hx"
							if (( s1 != null )) {
								#line 174 "/opt/haxe/std/haxe/CallStack.hx"
								b.b.Append(((string) (")") ));
							}
							
						}
						
						#line 161 "/opt/haxe/std/haxe/CallStack.hx"
						break;
					}
					
					
					case 3:
					{
						#line 175 "/opt/haxe/std/haxe/CallStack.hx"
						string meth = ( s as global::haxe.StackItem_Method ).method;
						#line 175 "/opt/haxe/std/haxe/CallStack.hx"
						string cname = ( s as global::haxe.StackItem_Method ).classname;
						#line 175 "/opt/haxe/std/haxe/CallStack.hx"
						{
							#line 176 "/opt/haxe/std/haxe/CallStack.hx"
							b.b.Append(((string) (global::Std.@string(( (( cname == null )) ? ("<unknown>") : (cname) ))) ));
							b.b.Append(((string) (".") ));
							#line 178 "/opt/haxe/std/haxe/CallStack.hx"
							b.b.Append(((string) (global::Std.@string(meth)) ));
						}
						
						#line 175 "/opt/haxe/std/haxe/CallStack.hx"
						break;
					}
					
					
					case 4:
					{
						#line 179 "/opt/haxe/std/haxe/CallStack.hx"
						global::haxe.lang.Null<int> n = ( s as global::haxe.StackItem_LocalFunction ).v;
						#line 179 "/opt/haxe/std/haxe/CallStack.hx"
						{
							#line 180 "/opt/haxe/std/haxe/CallStack.hx"
							b.b.Append(((string) ("local function #") ));
							b.b.Append(((string) (global::Std.@string((n).toDynamic())) ));
						}
						
						#line 179 "/opt/haxe/std/haxe/CallStack.hx"
						break;
					}
					
					
				}
				
			}
			#line default
		}
		
		
	}
}


