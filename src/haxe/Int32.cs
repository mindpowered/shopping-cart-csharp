// Generated by Haxe 4.1.1

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe._Int32 {
	public sealed class Int32_Impl_ {
		
		public static int negate(int this1) {
			unchecked {
				#line 31 "/opt/haxe/std/haxe/Int32.hx"
				return (  ~ (this1)  + 1 );
			}
			#line default
		}
		
		
		public static int preIncrement(int this1) {
			#line 34 "/opt/haxe/std/haxe/Int32.hx"
			this1 =  ++ this1;
			#line 34 "/opt/haxe/std/haxe/Int32.hx"
			return this1;
		}
		#line default
		
		public static int postIncrement(int this1) {
			#line 37 "/opt/haxe/std/haxe/Int32.hx"
			int ret = this1++;
			#line 39 "/opt/haxe/std/haxe/Int32.hx"
			return ret;
		}
		#line default
		
		public static int preDecrement(int this1) {
			#line 43 "/opt/haxe/std/haxe/Int32.hx"
			this1 =  -- this1;
			#line 43 "/opt/haxe/std/haxe/Int32.hx"
			return this1;
		}
		#line default
		
		public static int postDecrement(int this1) {
			#line 46 "/opt/haxe/std/haxe/Int32.hx"
			int ret = this1--;
			#line 48 "/opt/haxe/std/haxe/Int32.hx"
			return ret;
		}
		#line default
		
		public static int @add(int a, int b) {
			#line 52 "/opt/haxe/std/haxe/Int32.hx"
			return ( ((int) (a) ) + ((int) (b) ) );
		}
		#line default
		
		public static int addInt(int a, int b) {
			#line 55 "/opt/haxe/std/haxe/Int32.hx"
			return ( ((int) (a) ) + b );
		}
		#line default
		
		public static int sub(int a, int b) {
			#line 60 "/opt/haxe/std/haxe/Int32.hx"
			return ( ((int) (a) ) - ((int) (b) ) );
		}
		#line default
		
		public static int subInt(int a, int b) {
			#line 63 "/opt/haxe/std/haxe/Int32.hx"
			return ( ((int) (a) ) - b );
		}
		#line default
		
		public static int intSub(int a, int b) {
			#line 66 "/opt/haxe/std/haxe/Int32.hx"
			return ( a - ((int) (b) ) );
		}
		#line default
		
		public static double toFloat(int this1) {
			#line 248 "/opt/haxe/std/haxe/Int32.hx"
			return ((double) (this1) );
		}
		#line default
		
		public static int ucompare(int a, int b) {
			unchecked {
				#line 254 "/opt/haxe/std/haxe/Int32.hx"
				if (( a < 0 )) {
					#line 255 "/opt/haxe/std/haxe/Int32.hx"
					if (( b < 0 )) {
						#line 255 "/opt/haxe/std/haxe/Int32.hx"
						return ((int) (( ((int) ( ~ (b) ) ) - ((int) ( ~ (a) ) ) )) );
					}
					else {
						#line 255 "/opt/haxe/std/haxe/Int32.hx"
						return 1;
					}
					
				}
				
				#line 256 "/opt/haxe/std/haxe/Int32.hx"
				if (( b < 0 )) {
					#line 256 "/opt/haxe/std/haxe/Int32.hx"
					return -1;
				}
				else {
					#line 256 "/opt/haxe/std/haxe/Int32.hx"
					return ((int) (( ((int) (a) ) - ((int) (b) ) )) );
				}
				
			}
			#line default
		}
		
		
		public static int clamp(int x) {
			#line 278 "/opt/haxe/std/haxe/Int32.hx"
			return x;
		}
		#line default
		
	}
}


